:root {
  font-family: Montserrat, monospace;
  color: #cdcac0;
}

body {
  box-sizing: border-box;
}
$base-font: Montserrat, sans-serif;
$base-color: #cdcac0;
$color-black: #000;
$color-light-black: #242323;
$color-white: #fff;
$svg-color: #dea80f;
$theme-color: rgb(249, 168, 38);
$brand: ".kira-";
$section-padding: 2rem;

$mq-breakpoints: (
        mobile:  320px,
        tablet:  740px,
        desktop: 1025px,
        wide:    1400px
);

// To enable support for browsers that do not support @media queries,
// (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false
// Create a separate stylesheet served exclusively to these browsers,
// meaning @media queries will be rasterized, relying on the cascade itself
$mq-responsive: true;

// Name your breakpoints in a way that creates a ubiquitous language
// across team members. It will improve communication between
// stakeholders, designers, developers, and testers.
$mq-breakpoints: (
        mobile:  320px,
        tablet:  740px,
        desktop: 1025px,
        wide:    1400px,

  // Tweakpoints
        desktopAd: 810px,
        mobileLandscape: 480px
);

// Define the breakpoint from the $mq-breakpoints list that should
// be used as the target width when outputting a static stylesheet
// (when $mq-responsive is set to 'false').
$mq-static-breakpoint: desktop;

// If you want to display the currently active breakpoint in the top
// right corner of your site during development, add the breakpoints
// to this list, ordered by width. For example: (mobile, tablet, desktop).
//$mq-show-breakpoints: (mobile, mobileLandscape, tablet, desktop, wide);

@import '~sass-mq';


@mixin kira-on-circle($item-count, $circle-size, $item-size) {
  list-style: none;

  > * {
    position: absolute;
    left: 35%;
    width:  $item-size;
    height: $item-size;
    margin: -($item-size / 2);

    $angle: (360 / $item-count);
    $rot: 0;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform:
                rotate($rot * 1deg)
                translate($circle-size)
                rotate($rot * -1deg);
      }

      $rot: $rot + $angle;
    }
  }
}

/*------------------------------------*\
    #Reset
\*------------------------------------*/

* {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  font: inherit;
  line-height: inherit;
}

a,
abbr,
acronym,
address,
applet,
article,
aside,
audio,
b,
big,
blockquote,
body,
canvas,
caption,
center,
cite,
code,
dd,
del,
details,
dfn,
div,
dl,
dt,
em,
embed,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
hgroup,
hr,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
main,
mark,
menu,
nav,
noscript,
object,
ol,
output,
p,
pre,
q,
s,
samp,
section,
small,
span,
strike,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
tt,
u,
ul,
var,
video {
  margin: 0;
  padding: 0;
  border: 0;
  vertical-align: baseline;
}

// This is required for the images so it won't add
// extra 4px under the image, when having the image in a container
img {
  vertical-align: middle;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
a,
a:active,
a:visited {
  color: inherit;
}

*:focus {
  outline: none;
  outline: 0;
}

#{$brand}hide {
  display: none;
}